#!/bin/python

import sys
from time import sleep
import subprocess as sh
from threading import Thread, Event

from CatalisUtils.hardware import Led


# service object ---------------------------------------------------------------
class Service():
	def __init__(self, name:str):
		self.name = f"{name}.service"

	# get service status
	def status(self):
		return sh.getoutput(f"systemctl is-failed {self.name}")


# service scanner --------------------------------------------------------------
def service_scan(service_map:list, exit_event:Event) -> None:
	# reset failed states
	sh.run("systemctl reset-failed", shell=True)

	while not exit_event.is_set():
		for service in service_map:
			# turn off all leds for service
			for led in service["leds"].values(): led.off()

			# set led according to status
			if service["service"].status() == "failed":	service["leds"]["red"].on()
			elif service["service"].status() in ["active", "activating"]: service["leds"]["green"].on()

		sleep(5)


# network scanner
def network_scan(network_leds:dict, exit_event:Event) -> None:
	while not exit_event.is_set():
		# get network status
		network = sh.getoutput("iw dev wlan0 info | grep ssid | awk '{print $2}'")
		internet = int(sh.getoutput("wget -q --spider http://google.com ; echo $?")) == 0

		# turn off all network leds
		for led in network_leds.values(): led.off()
		
		# set network indicators
		if network and internet: network_leds["green"].on()
		elif network: network_leds["yellow"].on()
		else: network_leds["red"].on()

		sleep(25)


# daemon -----------------------------------------------------------------------
def daemon():
	network_leds = {
		"red": Led(22),
		"yellow": Led(10),
		"green": Led(9)
	}

	service_map = [
		{
			"service": Service(f"catalis-chmi@{sys.argv[1]}"),
			"leds": {"green": Led(17), "red": Led(27)}
		},
		{
			"service": Service(f"catalis-init@{sys.argv[1]}"),
			"leds": {"green": Led(5), "red": Led(6)}
		},
		{
			"service": Service(f"catalis-poll@{sys.argv[1]}"),
			"leds": {"green": Led(19), "red": Led(26)}
		},
		{
			"service": Service(f"catalis-csync@{sys.argv[1]}"),
			"leds": {"green": Led(20), "red": Led(21)}
		}
	]

	# define exit event for all threads
	exit_event = Event()

	# create scanning threads
	service_thread = Thread(target=service_scan, args=(service_map, exit_event))
	network_thread = Thread(target=network_scan, args=(network_leds, exit_event))

	try:
		service_thread.start()
		network_thread.start()
		
		service_thread.join()
		network_thread.join()

	# terminate threads and turn off all leds on exit
	except KeyboardInterrupt:
		exit_event.set()

		for service in service_map:
			for led in service["leds"].values():
				led.off()

		for led in network_leds.values(): led.off()


# driver -----------------------------------------------------------------------
if __name__ == "__main__":
	daemon()



