#!/bin/python

import os

from CatalisUtils.daemon import DBDaemon
from CatalisUtils.logging import Logger
from CatalisUtils.database import CatalisDB
from CatalisUtils.hardware import Led

import json
from time import sleep, strftime, gmtime, time
import apsw, apsw.bestpractice
from pyModbusTCP.client import ModbusClient
from configparser import RawConfigParser

# initialize apsw
apsw.bestpractice.apply((
	apsw.bestpractice.connection_busy_timeout,
	apsw.bestpractice.connection_enable_foreign_keys,
	apsw.bestpractice.connection_dqs
))


# initialize environment constants ---------------------------------------------
HMI_HOST 			= os.environ.get("CATALIS_HMI_HOST", 				"192.168.1.2")
BASE_POLLING_FREQ 	= os.environ.get("CATALIS_BASE_POLLING_FREQUENCY", 	"5")
POLL_RETRY_INT	 	= os.environ.get("CATALIS_POLL_RETRY_INTERVAL",		"10")


# data packet definition class -------------------------------------------------
class PacketDefinition():
	def __init__(self, type:str, frequency:int, addresses:list[int]) -> None:
		self.type = type
		self.frequency = frequency
		self.addresses = addresses
		self.lastpolled = -1 # poll immediately at startup
 

# get poll data dictionary -----------------------------------------------------
def poll(client:ModbusClient, addresses:list[int]) -> dict:
	try: return {str(addr):client.read_holding_registers(addr)[0] for addr in addresses}
	except TypeError as e: raise e # if None value exists in data (ie. failed to retrieve a register)


# driver -----------------------------------------------------------------------
if __name__ == "__main__":
	# shared object initialization
	warning_light = Led(24)
	logger = Logger(logfile=f"/var/log/catalis/poll-{strftime('%d%m%Y-%H%M%S', gmtime())}.log")


	# preliminary operations ---------------------------------------------------
	def prelim() -> None:
		# add to logging preamble
		logger.print(f"> HMI TCP/IP host address: {HMI_HOST}\n")


	# main loop ----------------------------------------------------------------
	def main(daemon:DBDaemon, db:CatalisDB) -> None:
		# load packet definitions
		parser = RawConfigParser()
		parser.read("/srv/CatalisDATA/config/packet.conf")

		packet_defs = [
			PacketDefinition(
				type=definition,
				frequency=int(parser.get(definition, "Frequency")),
				addresses=[int(x) for x in parser.get(definition, "Addresses").split(",")]
			) 
			for definition in parser.sections()
		]

		# initialize HMI MODBUS client
		hmi = ModbusClient(host=HMI_HOST, timeout=int(BASE_POLLING_FREQ))

		# main loop
		groupcount = 1
		groupstart = False
		
		while True:
			for packet in packet_defs:
				if (pollstart := int(time())) - packet.lastpolled > packet.frequency:
					# print visual separator at start of each pollign group
					if not groupstart: 
						logger.print("---------|")
						groupstart = True

					# poll for data
					logger.log(f"(poll~g{groupcount:03}) <1/2>: Polling HMI for packet type: \"{packet.type}\"... ", endline=False)
					
					while True:			
						try:
							data = poll(hmi, addresses=packet.addresses)
							logger.cap(f"read {len(data)} registers.")

							warning_light.off()
							break
						
						except TypeError: # on failure, retry...
							warning_light.on()

							logger.cap("error.")
							logger.log(f"No data received from link. Retrying in {POLL_RETRY_INT}s... ", level=Logger.ERROR, endline=False)

							sleep(int(POLL_RETRY_INT))

					# write data to database
					logger.log(f"(poll~g{groupcount:03}) <2/2>: Writing to database... ", endline=False)

					try: 
						timestamp = strftime("%s", gmtime())
						db.execute("INSERT INTO packets (timestamp, type, data) VALUES (?,?,?);", (timestamp, packet.type, json.dumps(data)))
						logger.cap("written.")
						packet.lastpolled = pollstart

					# on failure, throw fatal error...
					except (apsw.ReadOnlyError, apsw.CantOpenError) as e:
						daemon._exit_fatal(cleanup)

			# increment pollgroup count
			if groupstart: 
				groupcount += 1
				groupstart = False

			sleep(int(BASE_POLLING_FREQ))


	# cleanup function ---------------------------------------------------------
	def cleanup() -> None:
		warning_light.off()


	# initialize and start daemon ----------------------------------------------
	daemon = DBDaemon(
		name="MODBUS Poller", 
		prelim=prelim, 
		main=main, 
		cleanup=cleanup, 
		logger=logger
	)

	daemon.start()